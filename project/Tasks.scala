import java.util.regex.Pattern

import sbt.Keys._
import sbt._

object Tasks {
  private val tagFile = new File("./src/main/scala/sri/web/vdom/Tags.scala")
  private val attrFile = new File("./src/main/scala/sri/web/vdom/Attributes.scala")
  //see #2
  private val removeOverloadedTags = taskKey[Unit]("Remove overloaded tags.")
  private val recoverOverloadedTags = taskKey[Unit]("Recover Tags.scala file from bak.")

  //create scalatags-like dom style.
  private val genStyledDomTags = taskKey[Unit]("Generate styled dom node.")
  private val genStyledDomProps = taskKey[Unit]("Generate styled dom props.")

  // ------------- definitions: --------------
  val taskSettings = Seq[Setting[_]](
    removeOverloadedTags := {
      val logger = streams.value.log
      val src = tagFile
      val dest = new File("./bak/Tags.scala")
      if (dest.exists()) logger.error("Tags.scala bak file already exists. Give up task!")
      else {
        IO.copyFile(src, dest)
        val all = IO.read(src).split("""@inline""")
        val head = all.head
        val first = "@inline" + all.tail.filter(_.contains("dom.Node")).mkString("@inline")
          .dropRight(3) //drop tail whiteSpace line.
        val second = all.tail.filter(!_.contains("dom.Node")).mkString("@inline")

        IO.write(new File("./bak/second.txt"), second)
        IO.write(src, head + first + IO.Newline + "}" + IO.Newline)
        logger.info(s"Removed second tag method in Tags.scala, file backed up in ./bak")
      }
    },
    recoverOverloadedTags := {
      val src = new File("./bak/Tags.scala")
      val dest = tagFile
      IO.copyFile(src, dest)
      streams.value.log.info(s"Tags.scala recovered from ./bak")
    },
    genStyledDomTags := {
      try {
        val head =
          s"""|package sri.macros.web
              |
              |import sri.core.{ReactElement, ReactNode}
              |import scala.language.experimental.macros
              |
              |/** The code is generated by sbt task. */
              |trait StyledTags {
              |""".stripMargin

        val NameExtr = """(?s).*def ([\w\d`]+)\[.*""".r
        val body = IO.read(tagFile).split("@inline").tail.map {
          case section@NameExtr(domName) =>
            section match {
              case sect if sect.contains("children: ReactNode*") =>
                s"""|  @inline def $domName(props: TypedProp[_]*)(children: ReactNode*): ReactElement = macro MacroImpl.domChooseImpl
                    |""".stripMargin
              case sect =>
                s"""|  @inline def $domName(props: TypedProp[_]*): ReactElement = macro MacroImpl.domChooseNoChildrenImpl
                    |""".stripMargin
            }
        }
        val dest = new File("./bak/generatedSource/StyledTags.scala")
        IO.write(dest, head + body.mkString(IO.Newline) + "}" + IO.Newline)
        streams.value.log.info(s"Dom < generated into ${dest.getCanonicalPath}")
      } catch {
        case e: Exception => e.printStackTrace()
      }
    },
    genStyledDomProps := {
      try {
        val head =
          s"""|package sri.macros.web
              |
              |import scalajs.js
              |import js.|
              |import org.scalajs.dom
              |
              |/** The code is generated by sbt task. */
              |trait StyledAttributes {
              |""".stripMargin

        val NameTypeExtr = """.*va[rl]{1} ([\w\d`]+): (.+) =.*""".r
        val body = IO.readLines(attrFile).filter(_.matches(""".* va[rl]{1} .*"""))
          .map(_.replaceAll(Pattern.quote("(_ <: SyntheticEvent[_]) => _"), "SyntheticEventCallback")).map {
          case NameTypeExtr(attrName, attrType) =>
            s"""|  object $attrName {def :=(v: $attrType): TypedProp[$attrType] = DummyProp}
                |""".stripMargin
        }

        val extra =
          s"""|
              |  object key {def :=(v: String | Int): TypedProp[String | Int] = DummyProp}
              |
              |  object ref {def :=(v: js.Function1[_<:dom.Node, Unit]): TypedProp[js.Function1[_<:dom.Node, Unit]] = DummyProp}
           """.stripMargin

        val dest = new File("./bak/generatedSource/StyledAttributes.scala")
        IO.write(dest, head + body.mkString(IO.Newline) + extra + "}" + IO.Newline)
        streams.value.log.info(s"Dom ^ generated into ${dest.getCanonicalPath}")
      } catch {
        case e: Exception => e.printStackTrace()
      }
    }
  )
}